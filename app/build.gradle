apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: 'config/quality.gradle'
apply from: 'config/jacoco.gradle'
apply from: 'config/coveralls.gradle'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0

def defaultVersionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
def defaultVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"
def defaultVersionNameShort = "${versionMajor}.${versionMinor}"

/**
 * Get the version code from command line param
 * Example usage: gradle tasks -PversionCode=999
 *
 * @return int If the param -PversionCode is present then return int value or default version code
 */
def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : defaultVersionCode
    println "VersionCode is set to $code"
    return code
}

/**
 * Get the version name from command line param
 * Example usage: gradle tasks -PversionName=1.999
 *
 * @return String If the param -PversionName is present then return String value or default version name
 */
def getVersionName = { ->
    def defVersionName = versionPatch > 0 ? defaultVersionName : defaultVersionNameShort
    def name = project.hasProperty('versionName') ? versionName.toString() : defVersionName
    println "VersionName is set to " + name
    return name
}

def getFabricApiKey = { ->
    def noKey = "0000000000000000000000000000000000000000"
    def key = project.hasProperty('fabricApiKey') ? fabricApiKey.toString() :
            System.getenv("FABRIC_API_KEY") ?: noKey
    if (key == noKey)
        println "Fabric API key not found"
    else
        println "Fabric API key found"
    return key
}

def getFabricApiSecret = { ->
    def secret = project.hasProperty('fabricApiSecret') ? fabricApiSecret.toString() :
            System.getenv("FABRIC_API_SECRET") ?: ""
    if (secret.isEmpty())
        println "Fabric API Secret not found"
    else
        println "Fabric API Secret found"
    return secret
}

task fabricProperties() {
    description "Generate fabric.properties file with apiSecret"
    ant.propertyfile(file: "$projectDir/fabric.properties") {
        entry(key: "apiSecret", value: getFabricApiSecret())
    }
}

preBuild.dependsOn('fabricProperties')

android {
    compileSdkVersion 25
    buildToolsVersion "24.0.3"
    defaultConfig {
        applicationId "com.vgaidarji.cimatters"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                fabricApiKey: getFabricApiKey()
        ]
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.jakewharton:butterknife:5.1.1'
    compile 'com.android.support:design:25.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
